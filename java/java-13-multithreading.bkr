{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Java",
            "plugin": "Java",
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "text/x-java"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "markdownyIL3Xh",
            "type": "markdown",
            "body": [
                "# Multithreading"
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectiona4kEFF",
            "type": "section",
            "title": "Running Threads",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownj8FgDo",
            "type": "markdown",
            "body": [
                "A **thread** is a program unit that is executed _independently_ of other parts of the program."
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownL6gG0m",
            "type": "markdown",
            "body": [
                "## Running a thread is simple in Java -- follow these stpes:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionDFXoUH",
            "type": "section",
            "title": "Step 0: Runnable interface",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdowncFVLHO",
            "type": "markdown",
            "body": [
                "`java.util.Runnable` interface has method `run()`",
                "```Java",
                "public interface Runnable",
                "{",
                "  void run();",
                "}",
                "```"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeDJph1Z",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class BankAccount",
                    "{",
                    "  private double amount = 0.00;",
                    "  ",
                    "  public void deposit(double money)",
                    "  {",
                    "    amount += money;",
                    "  }",
                    "  ",
                    "  public double getAmount() ",
                    "  {",
                    "    return amount;",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d",
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 14
        },
        {
            "id": "section1sLhwh",
            "type": "section",
            "title": "Step 1: Write your task into `run()` method",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codeiI9DuV",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class MyRunnableTask implements Runnable",
                    "{",
                    "  private double money;",
                    "  private BankAccount account;",
                    "  ",
                    "  public MyRunnableTask(BankAccount account, double money)",
                    "  {",
                    "    this.account = account;",
                    "    this.money = money;",
                    "  }",
                    "  ",
                    "  @Override",
                    "  public void run()",
                    "  {",
                    "    account.deposit(money);",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d",
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 17
        },
        {
            "id": "sectionU3pAET",
            "type": "section",
            "title": "Step 3: Create an object of your task",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownan4GZU",
            "type": "markdown",
            "body": [
                "```Java",
                "Runnable r = new MyRunnableTask(\"Hello Thread\");",
                "```"
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionMiSFbg",
            "type": "section",
            "title": "Step 4: Construct a `Thread` object from the runnable object",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownumA9qt",
            "type": "markdown",
            "body": [
                "```Java",
                "Thread t = new Thread(r);",
                "```"
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionMFneo6",
            "type": "section",
            "title": "Step 5: Call the `start()` method to start the thread",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownFivwG4",
            "type": "markdown",
            "body": [
                "```Java",
                "t.start();",
                "```"
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionIyVc78",
            "type": "section",
            "title": "Hello Thread",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "code4VG7pd",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "BankAccount myAccount = new BankAccount();",
                    "Runnable r = new MyRunnableTask(myAccount, 1);",
                    "Thread t = new Thread(r);",
                    "t.start();",
                    "",
                    "// wait until thread is finish",
                    "while (true) {",
                    "  if (!t.isAlive()) {",
                    "    break;",
                    "  }",
                    "  java.util.concurrent.TimeUnit.SECONDS.sleep(1);",
                    "}",
                    "System.out.println(myAccount.getAmount());"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 13
        },
        {
            "id": "sectionrnxMJI",
            "type": "section",
            "title": "`Thread.sleep(milliseconds)`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownIZ6ja7",
            "type": "markdown",
            "body": [
                "The `sleep()` method puts the current thread to sleep for a given number of milliseconds",
                "",
                "* A thread might sleep for so long that it is no longer useful and should be ternimated.",
                "* When a sleeping thread is interrupted, an `InterruptedException` is generated.",
                "* You need to catch that exception in your `run()` method and terminate the thread.",
                "",
                "```Java",
                "public void run()",
                "{",
                "  try",
                "  {",
                "    // Task statements",
                "    Thread.sleep(1000); // sleep for 1 second",
                "  } catch(InterruptedException exception) {",
                "    // ...",
                "  }",
                "  // Clean up, if neccesary.",
                "}",
                "```"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeHJW4CV",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class BankAccountRunnableTask implements Runnable",
                    "{",
                    "  private final int REPETITIONS = 10;",
                    "  private final int DELAY = 1000;",
                    "  private double money;",
                    "  private BankAccount account;",
                    "  ",
                    "  public BankAccountRunnableTask(BankAccount account, double money)",
                    "  {",
                    "    this.account = account;",
                    "    this.money = money;",
                    "  }",
                    "  ",
                    "  @Override",
                    "  public void run()",
                    "  {",
                    "    try {",
                    "      for (int i = 1; i <= REPETITIONS; i++) {",
                    "        account.deposit(money);",
                    "        Thread.sleep(DELAY); // sleep thread for 1 second",
                    "      }",
                    "    } catch (InterruptedException exception) {",
                    "      System.err.println(\"Thread was interrupted\");",
                    "    }",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d",
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 26
        },
        {
            "id": "codeprYyUI",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "BankAccount myAccount = new BankAccount();",
                    "Runnable r = new BankAccountRunnableTask(myAccount, 1);",
                    "Thread t = new Thread(r);",
                    "t.start();",
                    "",
                    "while (true) {",
                    "  if (!t.isAlive()) {",
                    "    break;",
                    "  }",
                    "  System.out.println(\"(DEBUG) amount: \" + myAccount.getAmount());",
                    "  java.util.concurrent.TimeUnit.SECONDS.sleep(1);",
                    "}",
                    "System.out.println(myAccount.getAmount());"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 13
        },
        {
            "id": "sectionVVMn0Y",
            "type": "section",
            "title": "Multithreading",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "sectionmWdjZE",
            "type": "section",
            "title": "Multithreading on each account",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeefWPnw",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "BankAccount[] accounts = new BankAccount[3];",
                    "Thread[] threads = new Thread[3];",
                    "",
                    "for (int i=0; i<threads.length; i++) {",
                    "  accounts[i] = new BankAccount();",
                    "  threads[i] = new Thread(new BankAccountRunnableTask(accounts[i], Math.pow(10, (2 * i))));",
                    "}",
                    "",
                    "for (Thread t : threads) {",
                    "  t.start();  ",
                    "}",
                    "",
                    "// check whether all threads are finish ====================================================",
                    "int[] finishThreads = new int[]{0, 0, 0};",
                    "while (true) {",
                    "  for (int i=0; i<threads.length; i++) {",
                    "    if ((finishThreads[i] == 0) && !threads[i].isAlive()) {",
                    "      finishThreads[i] = 1;",
                    "    }",
                    "    System.out.println(\"(DEBUG) amount in account \" + i + \" : \" + accounts[i].getAmount());",
                    "  }",
                    "  java.util.concurrent.TimeUnit.SECONDS.sleep(1);",
                    "  int sum = java.util.stream.IntStream.of(finishThreads).sum();",
                    "  if (sum == threads.length) break;",
                    "}",
                    "",
                    "for (int i=0; i<accounts.length; i++)",
                    "  System.out.println(\"Amount in account \" + i + \" : \" + accounts[i].getAmount());"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 28
        },
        {
            "id": "sectionQtKhZQ",
            "type": "section",
            "title": "Multithreading on same account",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "codeT90o7X",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "BankAccount myAccount = new BankAccount();",
                    "",
                    "Thread[] threads = new Thread[3];",
                    "threads[0] = new Thread(new BankAccountRunnableTask(myAccount, 1));",
                    "threads[1] = new Thread(new BankAccountRunnableTask(myAccount, 100));",
                    "threads[2] = new Thread(new BankAccountRunnableTask(myAccount, 10000));",
                    "for (Thread t : threads) {",
                    "  t.start();  ",
                    "}",
                    "",
                    "// check whether all threads are finish ====================================================",
                    "int[] finishThreads = new int[]{0, 0, 0};",
                    "while (true) {",
                    "  for (int i=0; i<threads.length; i++) {",
                    "    if ((finishThreads[i] == 0) && !threads[i].isAlive()) {",
                    "      finishThreads[i] = 1;",
                    "    }",
                    "    System.out.println(\"(DEBUG) amount on thread \" + i + \" : \" + myAccount.getAmount());",
                    "  }",
                    "  java.util.concurrent.TimeUnit.SECONDS.sleep(1);",
                    "  int sum = java.util.stream.IntStream.of(finishThreads).sum();",
                    "  if (sum == threads.length) break;",
                    "}",
                    "",
                    "System.out.println(myAccount.getAmount());"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 25
        },
        {
            "id": "sectionkVNlr0",
            "type": "section",
            "title": "Thread Pools with `ExecutorService`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdown5Tlndp",
            "type": "markdown",
            "body": [
                "* Threads are managed by the operating system, and there is a cost for creating threads.",
                "* Each thread requires memory, and thread creation takes time.",
                "* This cost can be reduced by using a thread pool."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeE9Zlff",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "import java.util.concurrent.ExecutorService;",
                    "import java.util.concurrent.Executors;",
                    "import java.util.concurrent.TimeUnit;",
                    "",
                    "BankAccount myAccount = new BankAccount(); // try debugging amount in eclipse",
                    "",
                    "int MAX_THREADS = 2; // กำหนดจำนวนสูงสุดของ threads ใน pool (หมายความว่าจะ run พร้อมกัน รอบละ 2 threads)",
                    "// กำหนด thread pool",
                    "ExecutorService pool = Executors.newFixedThreadPool(MAX_THREADS);",
                    "",
                    "Runnable[] r = new Runnable[4];",
                    "",
                    "for (int i=0; i<r.length; i++) {",
                    "  r[i] = new BankAccountRunnableTask(myAccount, Math.pow(10, 2*i));",
                    "  pool.execute(r[i]);",
                    "}",
                    "",
                    "pool.shutdown(); ",
                    "",
                    "System.out.println(myAccount.getAmount());",
                    "try {",
                    "  if(pool.awaitTermination(1, TimeUnit.MINUTES)) {",
                    "    System.out.println(myAccount.getAmount());",
                    "  }",
                    "} catch (InterruptedException e) {",
                    "  e.printStackTrace();",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 27
        },
        {
            "id": "sectionBRvf2t",
            "type": "section",
            "title": "Terminating Threads",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdown6pHZ4J",
            "type": "markdown",
            "body": [
                "## 1. The normal way of terminating a thread",
                "* When the `run()` method of a thread has finished executing.",
                "",
                "## 2. `interrupt()` method",
                "* You may have several threads trying to find a solution to a problem.",
                "* As soon as the first one has succeeded, you may want to terminate the other ones.",
                "* To notify a thread that it should clean up and terminate, you use the `interrupt()` method.",
                "",
                ""
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionqurvqr",
            "type": "section",
            "title": "`GuessNumber`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeeHccNM",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class GuessNumber {",
                    "  private int target;",
                    "  ",
                    "  public GuessNumber(int target) {",
                    "    this.target = target;",
                    "  }",
                    "  ",
                    "  public boolean guess(int number) {",
                    "      return target == number;",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 11
        },
        {
            "id": "section3mwfuv",
            "type": "section",
            "title": "`GuessNumberListener`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeIXee7X",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class GuessNumberListener {",
                    "  private boolean stopThreads = false;",
                    "  ",
                    "  public void setStopSignal() {",
                    "    stopThreads = true;",
                    "  }",
                    "  ",
                    "  public boolean getStopThread() {",
                    "    return stopThreads;",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 11
        },
        {
            "id": "section75V3de",
            "type": "section",
            "title": "`GuessRunnableTask`",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeXPy19u",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "public class GuessRunnableTask implements Runnable {",
                    "  private GuessNumber guessNumber;",
                    "  private GuessNumberListener listener;",
                    "  private int start;",
                    "  private int end;",
                    "  private int countGuess;",
                    "  private boolean found;",
                    "  ",
                    "  public GuessRunnableTask(GuessNumber guessNumber, int start, int end, GuessNumberListener listener) {",
                    "    this.guessNumber = guessNumber;",
                    "    this.start = start;",
                    "    this.end = end;",
                    "    this.listener = listener;",
                    "  }",
                    "  ",
                    "  @Override",
                    "  public void run() {",
                    "    try {",
                    "      for (int i=start; i<=end; i++) {",
                    "        countGuess++;",
                    "        if (guessNumber.guess(i)) {",
                    "          found = true;",
                    "          listener.setStopSignal();",
                    "          break;",
                    "        }",
                    "         Thread.sleep(200);",
                    "      }",
                    "    } catch (InterruptedException exception) {",
                    "      ",
                    "    }",
                    "  }",
                    "  ",
                    "  public boolean getFound() {",
                    "    return found;",
                    "  }",
                    "  ",
                    "  public int getCountGuess() {",
                    "    return countGuess;",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 40
        },
        {
            "id": "sectionEeOYBb",
            "type": "section",
            "title": "Guess Number with Multithreading",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "coderD8c1O",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "GuessNumber puzzle = new GuessNumber(56);",
                    "GuessNumberListener stopThreadsListener = new GuessNumberListener();",
                    "",
                    "GuessRunnableTask[] r = new GuessRunnableTask[4];",
                    "Thread[] threads = new Thread[4];",
                    "",
                    "for (int i=0; i<threads.length; i++) {",
                    "  r[i] = new GuessRunnableTask(puzzle, 50 * i + 1, 50 * (i + 1), stopThreadsListener);",
                    "  threads[i] = new Thread(r[i]);",
                    "}",
                    "",
                    "for (Thread t : threads) {",
                    "  t.start();  ",
                    "}",
                    "",
                    "// check whether all threads are finish ====================================================",
                    "int[] finishThreads = new int[]{0, 0, 0, 0};",
                    "while (true) {",
                    "  if (stopThreadsListener.getStopThread()) {",
                    "    for (Thread t : threads) {",
                    "      // To notify a thread that it should clean up and terminate, you use the interrupt() method.",
                    "      t.interrupt();  ",
                    "    }",
                    "  }",
                    "  ",
                    "  for (int i=0; i<threads.length; i++) {",
                    "    if ((finishThreads[i] == 0) && !threads[i].isAlive()) {",
                    "      finishThreads[i] = 1;",
                    "    }",
                    "    ",
                    "  }",
                    "  java.util.concurrent.TimeUnit.SECONDS.sleep(1);",
                    "  int sum = java.util.stream.IntStream.of(finishThreads).sum();",
                    "  if (sum == threads.length) break;",
                    "}",
                    "",
                    "for (int i=0; i<r.length; i++)",
                    "  System.out.println(\"Task \" + i + \" {found:\" + r[i].getFound() + \", count:\" + r[i].getCountGuess() + \"}\");"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Java",
                "shellId": "25b074cf-4c88-4929-bae0-cda09287715d"
            },
            "evaluatorReader": true,
            "lineCount": 38
        }
    ],
    "namespace": {}
}
